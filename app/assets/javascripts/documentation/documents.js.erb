(function ($) {
  "use strict";

  var Documentation_document = function (options) {
    this.init('documentation_document', options, Documentation_document.defaults);
  };

  //inherit from Abstract input
  $.fn.editableutils.inherit(Documentation_document, $.fn.editabletypes.abstractinput);

  $.extend(Documentation_document.prototype, {
    /**
        Renders input from tpl

        @method render()
        **/
    render: function() {
        this.$input = this.$tpl.find('input, textarea');
  },

  /**
        Default method to show value in element. Can be overwritten by display option.

        @method value2html(value, element)
        **/
  value2html: function(value, element) {
    if(!value) {
    $(element).empty();
      return;
  }
  var html = $('<div>').text(value.title).html();
  $(element).html(html);
  },

  /**
        Gets value from element's html

        @method html2value(html)
        **/
  html2value: function(html) {
    /*
            you may write parsing method to get value by element's html
            e.g. "Moscow, st. Lenina, bld. 15" => {title: "Moscow", description: "Lenina", issued: "15"}
            but for complex structures it's not recommended.
            Better set value directly via javascript, e.g.
            editable({
                value: {
                    title: "Moscow",
                    description: "Lenina",
                    issued: "15"
                }
            });
          */
  return null;
  },

  /**
        Converts value to string.
        It is used in internal comparing (not for sending to server).

        @method value2str(value)
       **/
  value2str: function(value) {
  var str = '';
  if(value) {
    for(var k in value) {
    str = str + k + ':' + value[k] + ';';
  }
  }
  return str;
  },

  /*
        Converts string to value. Used for reading value from 'data-value' attribute.

        @method str2value(str)
       */
  str2value: function(str) {
    /*
           this is mainly for parsing value defined in data-value attribute.
           If you will always set value by javascript, no need to overwrite it
           */
  return str;
  },

  /**
        Sets value of input.

        @method value2input(value)
        @param {mixed} value
       **/
  value2input: function(value) {
    if(!value) {
      return;
    }
    this.$input.filter('[name="title"]').val(value.title);
    this.$input.filter('[name="description"]').val(value.description);
  },

  /**
        Returns value of input.

        @method input2value()
       **/
  input2value: function() {
      return {
          title: this.$input.filter('[name="title"]').val(),
          description: this.$input.filter('[name="description"]').val()
      };
  },

  /**
        Activates input: sets focus on the first field.

        @method activate()
       **/
  activate: function() {
    this.$input.filter('[name="title"]').focus();
  },

  /**
        Attaches handler to submit form in case of 'showbuttons=false' mode

        @method autosubmit()
       **/
  autosubmit: function() {
    this.$input.keydown(function (e) {
      if (e.which === 13) {
      $(this).closest('form').submit();
  }
  });
  }
  });

  Documentation_document.defaults = $.extend({}, $.fn.editabletypes.abstractinput.defaults, {
    tpl: '<div class="editable"><label><span>' + I18n.t('form.title') + ':</span><input type="text" name="title" class="col-xs-12"></label></div>'+
      '<div class="editable"><label><span>' + I18n.t('form.description') + ':</span></label><br/><textarea class="col-xs-12" rows="5" name="description" class="input-small"></textarea></div>'+
      '</div><dic class="clear"></div>',

    inputclass: ''
  });

  $.fn.editabletypes.documentation_document = Documentation_document;

}(window.jQuery));