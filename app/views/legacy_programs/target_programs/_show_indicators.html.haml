:css
  .ui-slider {
      width: 98%;
      margin-left: 10px;
  }

- if @indicators.length > 0
  #programs_indicators
    %p
      %span#year_range{ :style => 'color:#f6931f; font-weight:bold;' }
    #year_slider
    %br
    .btn-group{"data-toggle" => "btns"}
      - @indicators.keys.each_with_index do |group, index|
        - if index == 0
          - btn_class = 'btn btn-default active'
        - else
          - btn_class = 'btn btn-default'
        %a{"data-toggle" => "tab", :href => "#group" + index.to_s, :class => btn_class }
          = group

    .tab-content
      - @indicators.keys.each_with_index do |group, index|
        - if index == 0
          - tab_class = 'tab-pane active'
        - else
          - tab_class = 'tab-pane'
        %div{:id => "group" + index.to_s, :class => tab_class}
          %div
            -@indicators[group].keys.each_with_index do |indicator, i|
              .title
                = indicator + ', ' + @indicators[group][indicator]['unit']
                -# id for chart
              %div{:class => "indicator" + i.to_s}
                .comments

:javascript

  $(document).ready(function() {

    // --------------------- navigation buttons for indicators ---------------------------
    $('[data-toggle="btns"] .btn').on('click', function(){
    	var $this = $(this);
      	$this.parent().find('.active').removeClass('active');
        $this.addClass('active');
    });

    // ------------------------ range slider to choose year --------------------------------
    var year_start = parseInt('#{@programs_target_program['term_start']}');
    var year_end = parseInt('#{@programs_target_program['term_end']}');
    var graphs = [], x, xAxis; // variables for charts svg - to make transition

    $("#year_slider").slider({
      range: true,
      min: year_start,
      max: year_end,
      values: [year_start, year_end],
      slide: function( event, ui ) {
        if(ui.values[ 1 ] - ui.values[ 0 ] < 1) {
          return false
        }
        $( "#year_range" ).text( ui.values[ 0 ] + " - " + ui.values[ 1 ] + I18n.t('programs.target_programs.show.years') );
        x.domain([ui.values[ 0 ], ui.values[ 1 ]]);
        graphs.forEach(function(graph) {
          graph['graph'].transition().duration(750)
               .select(".x.axis").call(xAxis);
          graph['graph'].transition().duration(750)
               .select(".path").attr("d", graph['line'](graph['data']));
          graph['graph'].selectAll('circle').transition().duration(750)
                        .attr("cx", function(d){ return x(d["year"]); });
          graph['graph'].selectAll('.dot_text').transition().duration(750)
                        .attr("x", function(d){ return x(d["year"]) - 10; });
        })
      }
    });

    $( "#year_range" ).text( $( "#year_slider" ).slider( "values", 0 ) + " - " + $( "#year_slider" ).slider( "values", 1 ) + I18n.t('programs.target_programs.show.years') );

    // ------------------------------ create charts -----------------------------------------
    var indicators = JSON.parse('#{@indicators.to_json}');
    var years = [];
    for(var i = year_start; i <= year_end; i++) {
      years.push(i);
    }
    var j = 0;
    for(var group in indicators) {
      var i = 0;
      for(var key in indicators[group]) {
        create_chart('group' + j + ' .indicator' + i, indicators[group][key]['years']);
        i++;
      }
      j++;
    }
    function create_chart(chart_id, y_data) {
      var data = [];
      var values = [];
      $.each(y_data, function(year, year_value){
        values.push(parseFloat(year_value['amount_fact']));
        data.push({"year": parseInt(year), "value": year_value['amount_fact']});
      })
      data.sort(function(a, b) { return a["year"] - b["year"]; } );
      var current_year = data[data.length-1]["year"];

      // define dimensions of graph
      var m = [30, 45, 30, 45]; // margins
      var w; // width
      $('#tab_expences').width() ? w = $('#tab_expences').width() - m[1] - m[3] : w = $(document).width() - m[1] - m[3]
      var h = 200 - m[0] - m[2]; // height

      // X scale and Y scales range
      x = d3.scale.linear().domain([year_start, year_end]).range([0, w]);
      var y = d3.scale.linear().domain([d3.min(values), d3.max(values)]).range([h, 10]);

      // create area under graph
      //var area = d3.svg.area()
      //    .x(function(d) { return x(d["year"]); })
      //    .y0(h)
      //    .y1(function(d) { return y(d["value"]); })
      //    // make the line curved
      //    .interpolate("monotone")

      // create a line function that can convert data[] into x and y points
      var line = d3.svg.line()
          // assign the X function to plot our line as we wish
          .x(function(d,i) { return x(d["year"]); })
          .y(function(d) { return y(d["value"]); })
          // make the line curved
          //.interpolate("monotone")

      // Add an SVG element with the desired dimensions and margin.
      graph = d3.select('#' + chart_id).append("svg:svg")
            .attr("width", w + m[1] + m[3])
            .attr("height", h + m[0] + m[2])
            .attr("version", 1.1)
            .attr("xmlns", "http://www.w3.org/2000/svg")
          .append("svg:g")
            .attr("transform", "translate(" + m[3] + "," + m[0] + ")");

      // create yAxis
      xAxis = d3.svg.axis().scale(x).tickSize(-h).tickSubdivide(false).ticks(years.length-1).tickFormat(d3.format("d"));
      // Add the x-axis.
      graph.append("svg:g")
            .attr("class", "x axis")
            .attr("transform", "translate(0," + (h + 10) + ")")
            .call(xAxis);

      // add area under graph
      //graph.append("path")
      //        .datum(data)
      //        .attr("class", "area")
      //        .attr("d", area);

      graph.append("defs")
          .append("svg:clipPath")
          .attr("id", "path_clip")
          .append("svg:rect")
          .attr("id", "clip-rect")
          .attr("x", "0")
          .attr("y", "0")
          .attr("width", w)
          .attr("height", h);

      // Add the line by appending an svg:path element with the data line we created above
      // do this AFTER the axes above so that the line is above the tick-lines
      graph.append("svg:path")
           .attr("class","path")
           .attr("clip-path", "url(#path_clip)")
           .attr("d", function() {return line(data)});

      graph.selectAll("dot")
           .data(data)
         .enter().append("circle")
           .attr("class", function(d) { return d["year"] == current_year ? "active_point" : ""; })
           .attr("r", function(d) { return d["year"] == current_year ? "5" : "3"; })
           .attr("cx", function(d) { return x(d["year"]); })
           .attr("cy", function(d) { return y(d['value']); })
           .attr("fill", "#6EC4DA")
           .attr("title", function(d) { return d['value']; })
           .on("mouseover", mouseover)
           .on("mouseout", mouseout)
           .on("click", mouseclick);

      graph.selectAll("dot")
           .data(data)
         .enter().append("text")
           .attr("font-size", "0.8em")
           .attr("fill", "#817E7E")
           .attr("class", "dot_text")
           .attr("x", function(d) { return x(d["year"]) - 10; })
           .attr("y", function(d) { return y(d['value']) - 10; })
           .text(function(d) { return d['value']; })

      graphs.push({"graph": graph, "data": data, "line": line});

      if(y_data[current_year]['description']) {
        $('#' + chart_id + ' .comments').text('На ' + current_year + ' р.: ' + y_data[current_year]['description']);
      }

      function mouseclick(d) {
        if(d["year"] != current_year) {
          $('#' + chart_id).find(".active_point").attr("class", " ").attr("stroke", "none").attr("r","3");
          $(this).attr("class", "active_point").attr("r","5");
          current_year = d["year"];

          if(y_data[current_year]['description']) {
            $('#' + chart_id + ' .comments').text('На ' + current_year + ' р.: ' + y_data[current_year]['description']);
          } else {
            $('#' + chart_id + ' .comments').text('');
          }

        }
      }

      function mouseover(d) {
        d3.select(this)
          .attr("stroke", "#6EC4DA")
          .attr("cursor", "pointer")
          .attr("stroke-width", 4);
      }

      function mouseout(d) {
        if(d["year"] != current_year) {
          d3.select(this)
            .attr("stroke", "none");
        }
      }
    }
  })