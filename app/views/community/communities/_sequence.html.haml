#sequence

:javascript

  function aSequence(aContainer) {
    var b = {
          w: 220, h: 45, s: 3, t: 10
        };
    var self, path;

    return {
      // Given a node in a partition layout, return an array of all of its ancestor
      // nodes, highest first, but excluding the root.
      container: aContainer,

      show: function(node) {
        this.hideBreadcrumb();
        var nodeArray = ["Ukraine"];
        if(node != "Ukraine") {
          nodeArray.push(node);
        }
        this.updateBreadcrumbs(nodeArray);
      },

      initializeBreadcrumbTrail: function(options) {
        self = this;
        self.clickCallback = options.clickCallback;
        // Add the svg area.
        if($("#trail").length <= 0 ) {         // prevent adding new trails when window resize
          var trail = d3.select(aContainer).append("svg:svg")
              .attr("width", '100%')
              .attr("height", 50)
              .attr("id", "trail");
        }
      },

      // Generate a string that describes the points of a breadcrumb polygon.
      breadcrumbPoints: function(d, i) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.
        points = []
        points.push("0,0");
        points.push(b.w + ",0");
        points.push(b.w + b.t + "," + (b.h / 2));
        points.push(b.w + "," + b.h);
        points.push("0," + b.h);
        if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex.
          points.push(b.t + "," + (b.h / 2));
        }
        return points.join(" ");
      },

      // Update the breadcrumb trail to show the current sequence and percentage.
      updateBreadcrumbs: function(nodeArray) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.

        // Data join; key function combines name and depth (= position in sequence).
        $(".sequence_hide").slideDown();       // if sequence block not empty it will be shown

        var g = d3.select(aContainer + " #trail")
            .selectAll("g")
            .data(nodeArray);

        // Add breadcrumb and label for entering nodes.
        var entering = g.enter().append("svg:g")
                                .attr('transform', "translate(0,0)")
                                .attr("cursor", function(d){ return (d == "Ukraine") ? 'pointer' : 'default'})
                                .attr("pointer-events", function(d){return (d == "Ukraine") ? 'auto' : 'none'})
                                .on("mouseover",function(d,i){
                                    d3.select('#breadcrumb_' + i).style("fill", "#357ebd");
                                })
                                .on("mouseout",function(d,i){
                                    d3.select('#breadcrumb_' + i).style("fill", "#428bca");
                                })
                                .on('click', function(d) {
                                  self.clickCallback(d);
                                });

        entering.append("svg:polygon")
            .attr("id", function(d,i){return "breadcrumb_" + i})
            .attr("points", this.breadcrumbPoints)
            .style("fill", "#428bca")
            .style("stroke", "white");

        entering.append("svg:text")
            .attr("x", 15)
            .attr("y", 20)
            .attr("dy", "0.35em")
            .attr("data-id", function(d,i){return "breadcrumb_" + i})
            .attr("text-anchor", "start")
            .style("fill", "white")
            .style("font-weight", "bold")
            .text(function(d) { if(d=="Ukraine") return "Україна"; return d; });

        // Set position for entering and updating nodes.
        g.attr("transform", function(d, i) {
          return "translate(" + i * (b.w + b.s) + ", 0)";
        });

        // Remove exiting nodes.
        g.exit().remove();

        // Make the breadcrumb trail visible, if it's hidden.
        $(aContainer + " #trail g").attr("style", "visibility: ;");
      },

      // Hide the breadcrumb trail
      hideBreadcrumb: function() {
        g = $(aContainer + " #trail g");
        g.not(':first').attr("style", "visibility: hidden;");
      }
    }
  }