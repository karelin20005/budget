:scss
  #sidebar_table {
    td { vertical-align: middle; }

    .color { float: left; margin-right: 10px; margin-top: 4px; width:10px; height:10px; }

    .show_onhover,  { display: none; }

    tr:hover {
      .color { width: 20px; height:20px; }
      .caption { font-size: 150%; }
      .amount { display: none; }
      .show_onhover { display: inline; }
    }
  }

#sidebar_table{'data_table_caption' => @table_caption}

:javascript
  function aSidebarTable() {
    var margin = {top: 20, right: 20, bottom: 30, left: 50},
        width, height;
    var self;

    function hide() {
      $("#sidebar_table").height(0).html('')
    }


    return {
      initialize: function(height, options) {
        width = $('#sidebar_chart').width() - margin.left - margin.right
        self = this;
        self.clickCallback = options.clickCallback;
        self.hoverCallback = options.hoverCallback;
      },
      hide: hide,
      show: function(data) {
        hide()

        if (data == null)
          return

        $("#sidebar_table").height('auto')

        var fact = false;
        $.each(data, function( index, value ) {
          if(value.amount_fact) {
            fact = true;
            return false;
          }
        });

        div = '<table class="table table-striped table-hover">\
                 <thead>\
                 <tr>\
                   <th class="col-sm-5">' + $('#sidebar_table').attr('data_table_caption') + '</th>\
                   <th class="col-sm-2">' + I18n.t('widgets.visify.sidebar_table.sum') + '</th>'

        if(fact) {
          div += "<th class='col-sm-2'>" + I18n.t('widgets.visify.sidebar_table.fact') + "</th>"
        }
        div += "<td class='col-sm-1'>" + I18n.t('widgets.visify.sidebar_table.to_recipient') + "</th>"
        div += '<td class="col-sm-1">' + I18n.t('widgets.visify.sidebar_table.specific_weight') + '</th>\
               </tr>\
               </thead><tbody>'

        $.each(data, function( index, value ) {
          var totalSize;
          if (value.parent) {
            totalSize = value.parent.amount;
          } else {
            totalSize = value.amount;
          }

          div += '<tr class="tr_nodes">'
            + '<td><div class="color" style="background-color:' + value.color + '"></div>'
            + '<span class="caption">' + value.label + '</span><span class="show_onhover">, Код: ' + value.key + '</span>'
          div += '</td>'
            //+ '<td class="table-graph"><div id="table-graph-' + value.id + '"></div></td>'
            + '<td><span class="amount">' + aVisify.helpers.formatNumber(value.amount) + '</span><span class="show_onhover">' + value.amount.toLocaleString() + '</span></td>'

          if(fact) {
            div += '<td>' + aVisify.helpers.formatNumber(value.amount_fact || 0) + ' (' + aVisify.helpers.getPercentageString((value.amount_fact || 0), value.amount)+ ')</td>';
          }

          recipient_amount_text = value.recipient_amount ? aVisify.helpers.formatNumber(value.recipient_amount) : ''
          div += '<td>' + recipient_amount_text + '</td>'

          div += '<td>' + aVisify.helpers.getPercentageString(value.amount, totalSize) + '</td>'


          div +=  '</tr>'

        });
        div += '</tbody></table>'

        $('#sidebar_table').html(div);

        d3.selectAll(".tr_nodes")
                    .style("cursor", "pointer")
                    .on("mouseover", function(d, i) {
                         self.hoverCallback(data[i])
                       })
                    .on("mouseout", function(d, i) {
                         self.hoverCallback(data[i].parent);
                       })
                    .on("click", function(d, i) {
                         self.clickCallback(data[i]);
                       });

        // ------------------------ BUILD GRAPHS IN TABLE -----------------------------

        var year_min = 0, year_max = 0;
        $.each(data, function( index, value ) {
          if(value['total_history'] && value['total_history']['plan']){
            year = d3.min(d3.keys(value['total_history']['plan']));
            if(year < year_min || year_min == 0) {
              year_min = year;
            }
            year = d3.max(d3.keys(value['total_history']['plan']));
            if(year > year_max) {
              year_max = year;
            }
          }
        })

        if(year_min == year_max) {
          $('#sidebar_table .table-graph').remove();
          return;
        }

        $.each(data, function( index, value ) {
          if(!value.aggregated){
            create_graph(value['total_history']['plan'], value['id']);
          }
        })

        function create_graph(_data, id) {
          var data = [];
          var value;
          for(var key in _data) {
            _data[key][0] ? value = _data[key][0]['total'] : value = 0;
            data.push({"year": parseInt(key), "value": value});
          }

          var margin = {top: 10, right: 10, bottom: 10, left: 10},
              width,
              height = 50 - margin.top - margin.bottom;
          if($('#chart').width() > 0) {
              width = $('#chart').width()*0.16 - margin.left - margin.right;
          } else {
              width = $('#tab_table').width()*0.16 - margin.left - margin.right;
          }


          // to find nearest year to current mouse position
          var bisectYear = d3.bisector(function(d){ return d.year;}).left;

          var x = d3.scale.linear()
                    .range([0,width]);

          var y = d3.scale.linear()
                    .range([height,0]);

          var line = d3.svg.line()
                       .x(function(d){return x(d.year);})
                       .y(function(d){return y(d.value);})
                       .interpolate("monotone")

          var current_year = new Date().getFullYear();

          x.domain([year_min, year_max]);
          y.domain(d3.extent(data, function(d){ return d.value;}));

          var graph = d3.select("#table-graph-" + id)
                        .append("svg")
                          .attr("width", width + margin.left + margin.right)
                          .attr("height", height + margin.top + margin.bottom)
                          .attr("version", 1.1)
                          .attr("xmlns", "http://www.w3.org/2000/svg")
                        .append("g")
                          .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

          graph.append("path")
               .datum(data)
               .attr("class", "line")
               .attr("d", line);

          // create interactive focus
          var focus = graph.append("g")
                           .attr("class", "focus")
                           .style("display", "none");

          // add two circles to focus point
          focus.append("circle")
               .attr("r", 5.5);
          focus.append("circle")
               .attr("r", 2)
               .style("fill", "steelBlue");

          // rectangle to detect mouse events and focus visibility
          var rect = graph.append("rect")
                          .attr("class", "overlay")
                          .attr("width", width)
                          .attr("height", height)
                          .on("mouseover", function(){ focus.style("display", null); })
                          .on("mouseout", function(){ focus.style("display", "none"); $(this).parent().find(".focus").tooltip('hide'); })
                          .on("mousemove", mousemove);

          function mousemove() {
            var x0 = x.invert(d3.mouse(this)[0]),
                i = bisectYear(data, x0, 1),
                d0 = data[i - 1],
                d1 = data[i],
                d = x0 - d0.year > d1.year - x0 ? d1 : d0;
            focus.attr("transform", "translate(" + x(d.year) + "," + y(d.value) + ")");
            var el = $(this).parent().find(".focus");
            el.tooltip({
                'container': 'body',
                'placement': 'top',
                'trigger': 'manual'
            });
            el.attr('data-original-title', d.year)
              .tooltip('fixTitle')
              .tooltip('show');
          }

        }

        // ---------------------- END BUILD GRAPHS IN TABLE ---------------------------

      },
    }
  }