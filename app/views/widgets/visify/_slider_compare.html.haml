:css
  #slider_compare .axis text {
    font: 10px sans-serif;
    fill: #888888;
  }

  #slider_compare .axis path,
  #slider_compare .axis line {
    fill: none;
    stroke: #C8C8C8;
    stroke-width: 1;
    shape-rendering: crispEdges;
  }

  .bar {
    fill: steelblue;
    cursor: pointer;
  }

  #slider_compare .bartext {
    font-size: 0.6em;
  }


#slider_compare
.pull-right
  = check_box_tag 'is_cumulative_sum', false, false
  = label_tag :is_cumulative_sum, t('cumulative_sum')

:javascript

  $(document).ready(function() {
    $('#is_cumulative_sum').click(function(e) {
      aTreeChart.setCumulative(this.checked)
    })
  })

  function aSliderCompare(aContainer) {
    var margin = {top: 20, right: 20, bottom: 30, left: 20},
        width, height;

    (aContainer == "#svg_tooltip #tooltip-month-slider" || aContainer == ".sidebar_modify #slider_compare") ? margin = {top: 20, right: 20, bottom: 30, left: 20} : margin = {top: 20, right: 20, bottom: 30, left: 20};

    var x0, x1, y, xAxis, yAxis;

    var svg;

    var color;

    var data, self;

    var current_month = 0, current_quarter = 0, current_node = null, current_year = 0, year_info = 1;

    function delay(d, i) { return i * 5; }

    function hide() {
      if (svg == undefined) return;
      //$(aContainer).height(0);
      //svg.selectAll("*").remove();
      d3.selectAll(".month_slider_chart").style("display","none");
    }

    function sort(data) {
      var xx = x0.domain(data.sort(false
              ? function(a, b) { return a.amount - b.amount; }
              : function(a, b) { return d3.ascending(parseInt(a.label), parseInt(b.label)); })
              .map(function(d) { return d.label; }))
              .copy();

      var transition = svg.transition().duration(150),
          delay = function(d, i) { return i * 10; };

      transition.selectAll(".bar")
          .delay(delay)
          .attr("x", function(d) { return xx(d.label); });

      transition.select(".x.axis")
          .call(xAxis)
        .selectAll("g")
          .delay(delay);
    }

    function get_history_data(data) {
      compare_months = {}
      compare_months["months"] = []
      var count = 0;
      for(var i = 0; i < 12; i++) {
        if (data[i+1]) {
          compare_months["months"][i] = { label: i+1, amount: data[i+1]['total'] };
        } else {
          compare_months["months"][i] = { label: i+1, amount: 0 };
          count++;
        }
      }

      if (count == 12) return;

      compare_months["quarters"] = []
      for(var i = 0; i < 4; i++) {
        compare_months["quarters"][i] = {}
        compare_months["quarters"][i]["label"] = i+1
        compare_months["quarters"][i]["amount"] = 0
        compare_months["quarters"][i]["count"] = 0
        for(var j = i*3; j < i*3 + 3; j++) {
          if(compare_months["months"][j]) {
            compare_months["quarters"][i]["amount"] += compare_months["months"][j]["amount"]
            compare_months["quarters"][i]["count"]++
          }
        }
      }

      return compare_months
    }

    function mouseclick(d) {
      if((d.count || d.count == 0)) {  // means that it is quarter
        if(d.label != current_quarter) {
          $(".bar.quarter").css("fill-opacity", "0.5").css("fill", "#9ecae1");
          $(".bar.month").css("fill-opacity", "0.5").css("fill", "#A4A4A4");
          $(this).css("fill-opacity", "1.0").css("fill", "#3182bd");
          current_quarter = d.label;
          current_month = 0;
          self.clickCallback(d.label, "quarter");
        } else if(year_info == 1) {
          current_quarter = 0;
          $(this).css("fill-opacity", "0.5").css("fill", "#9ecae1");
          self.clickCallback(d.label, "quarter");
        }
      } else {
        if(d.label != current_month) {
          $(".bar.month").css("fill-opacity", "0.5").css("fill", "#A4A4A4");
          $(".bar.quarter").css("fill-opacity", "0.5").css("fill", "#9ecae1");
          $("#month" + d.label).css("fill-opacity", "1.0").css("fill", "#6E6E6E");
          current_month = d.label;
          current_quarter = 0;
          self.clickCallback(d.label, "month");
        } else if(year_info == 1) {
          current_month = 0;
          $("#month" + d.label).css("fill-opacity", "0.5").css("fill", "#A4A4A4");
          self.clickCallback(d.label, "month");
        }
      }
    }

    function mouseover(d) {
      if(d.count || d.count == 0) {
        $(this).css("fill-opacity", "1.0");
        if(aContainer != "#svg_tooltip #tooltip-month-slider" && aContainer != ".sidebar_modify #slider_compare") {
          add_tooltip(d3.event, {label: d.label + " квартал", amount: d.amount})
        }
      } else {
        $("#month" + d.label).css("fill-opacity", "1.0");
      }
    }

    function mouseout(d) {
      if(d.label != current_quarter && (d.count || d.count == 0)) {
        $(this).css("fill-opacity", "0.5"); // means that it is quarter
      } else if(d.label != current_month && !(d.count || d.count == 0)) {
        $("#month" + d.label).css("fill-opacity", "0.5");
      }
      if(d.count || d.count == 0) {
        if(aContainer != "#svg_tooltip #tooltip-month-slider" && aContainer != ".sidebar_modify #slider_compare") {
          remove_tooltip(d);
        }
      }
    }

    function get_month_by_num(month) {
      return #{I18n.t :abbr_month_names, :scope => :date}[month]
    }

    function show(data) {
      //sort(data["months"]);

      svg.selectAll("*").remove();
      $(aContainer).height(height + margin.top + margin.bottom);

      x0.domain([1,2,3,4]);
      x1.domain([1,2,3,4,5,6,7,8,9,10,11,12].map(function(d) { return get_month_by_num(d);}));
      y.domain([0, d3.max(data["quarters"], function(d) { return d.amount; })]);

      svg.append("g")
          .attr("class", "x axis")
          .attr("transform", "translate(0," + (height+1) + ")")
          .call(xAxis);


      var quarters = svg.selectAll(".quarters")
                         .data(data["quarters"])
                       .enter().append("rect")
                         .attr("class", "bar quarter")
                         .style("fill", function(d) { return d.label == current_quarter ? "#3182bd" : "#9ecae1"; })
                         .style("fill-opacity", function(d) { return d.label == current_quarter ? "1.0" : "0.5"; })
                         .attr("stroke", "white")
                         .attr("stroke-width", 2)
                         .attr("x", function(d) { return x0(d.label); })
                         .attr("width", x0.rangeBand())
                         .attr("y", function(d) { return y(d.amount); })
                         .attr("height", function(d) { return height - y(d.amount); })
                         .on("mouseover", mouseover)
                         .on("mouseout", mouseout)
                         .on("click", mouseclick);

      var months = svg.selectAll(".months")
                         .data(data["months"])
                       .enter().append("rect")
                         .attr("class", "bar month")
                         .attr("id", function(d) { return "month"+d.label; })
                         .style("fill", function(d) { return d.label == current_month ? "#6E6E6E" : "#A4A4A4"; })
                         .style("fill-opacity", function(d) { return d.label == current_month ? "1.0" : "0.5"; })
                         .attr("stroke", "white")
                         .attr("stroke-width", 1)
                         .attr("x", function(d) { return x1(get_month_by_num(d.label)); })
                         .attr("width", x1.rangeBand())
                         .attr("y", function(d) { return y(d.amount); })
                         .attr("height", function(d) { return height - y(d.amount); })
                         .on("mouseover", mouseover)
                         .on("mouseout", mouseout)
                         .on("click", mouseclick);

      svg.select('.x.axis')
        .selectAll('.tick.major')
        .data(data["months"])
        .attr('cursor', 'pointer')
        .attr('pointer-events', function(d) { return d.amount == 0 ? 'none' : 'auto'; })
        .on('click', mouseclick)
        .on('mouseover', mouseover)
        .on('mouseout', mouseout)

      if(aContainer != "#svg_tooltip #tooltip-month-slider" && aContainer != ".sidebar_modify #slider_compare") {
        svg.selectAll(".bartext")
              .data(data["months"])
            .enter().append("text")
              .attr("class", "bartext")
              .attr("text-anchor", "middle")
              .attr("x", function(d) { return x1(d.label) + x1.rangeBand() / 2; })
              .attr("y", function(d) { return height; })

            //svg.transition().duration(250).selectAll(".bar")
              //.attr("height", function(d) { return height - y(d.amount); })
              //.attr("y", function(d) { return y(d.amount); })

            svg.transition().duration(250).selectAll(".bartext")
              .attr("y", function(d) { return y(d.amount) - 5; })
              .text(function(d){
                return d.amount == 0 ? "" : aVisify.helpers.formatNumber(d.amount);
              })
      }

    }

    return {
      initialize: function(pHeight, options) {
        self = this;
        self.clickCallback = options.clickCallback;
        $(aContainer).html('');
        width = $(aContainer).width() - margin.left - margin.right,
        height = pHeight - margin.top - margin.bottom;

        x0 = d3.scale.ordinal()
            .rangeRoundBands([0, width]);

        x1 = d3.scale.ordinal()
            .rangeRoundBands([0, width]);

        y = d3.scale.linear()
            .range([height, 0]);

        xAxis = d3.svg.axis()
            .scale(x1)
            .orient("bottom");

        color = d3.scale.category20c();

      },
      hide: hide,
      show: function(node, year) {
        if(!node || !node.history) {
          hide();
          return;
        }

        data = get_history_data(node.history[year]);

        if (!data || data["months"].length == 0){
          hide();
          return;
        }

        if(!node.history[year][0]) {
          for(var key in node.history[year]) {
            current_month = key;
            year_info = 0;
            break;
          }
        } else {
          year_info = 1;
        }

        d3.selectAll(".month_slider_chart").selectAll("*").remove();
        svg = d3.select(aContainer)
            .append("div")
              .attr("id","month_slider_" + node.id)
              .attr("class","month_slider_chart")
              .style("position","absolute")
              .style("display","block")
            .append("svg")
              .attr("width", width + margin.left + margin.right)
              .attr("height", height + margin.top + margin.bottom)
            .append("g")
              .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

        show(data);             // show months compare for the last year

        current_year = year;

      },
      current_node: function() {
        return current_node;
      },
      current_month: function() {
        return current_month;
      },
      current_year: function() {
        return current_year;
      },
      set_month: function(month) {
        current_month = month;
      },
      set_quarter: function(quarter) {
        current_quarter = quarter;
      },
      set_centerNode: function(node) {
        current_node = node;
      },
      onclick: function(d) {
        mouseclick(d);
      }
    }
  }

