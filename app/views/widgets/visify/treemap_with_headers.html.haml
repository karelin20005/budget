:css
  body {
      /*overflow: hidden;*/
      margin: 0;
      font-size: 12px;
      font-family: 'Lato', sans-serif;
  }

  .footer {
      z-index: 1;
      display: block;
      font-size: 26px;
      font-weight: 200;
      text-shadow: 0 1px 0 #fff;
  }

  svg {
      /*overflow: hidden;*/
  }

  rect {
      pointer-events: all;
      cursor: pointer;
      stroke: #EEEEEE;
  }

  .chart {
      display: block;
      margin: auto;
  }

  .parent .label {
      color: #FFFFFF;
      text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
      -webkit-text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
      -moz-text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
  }

  .labelbody {
      background: transparent;
  }

  .label {
      margin: 2px;
      white-space: pre;
      overflow: hidden;
      text-overflow: ellipsis;
      text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
      -webkit-text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
      -moz-text-shadow: 1px 1px 1px rgba(0, 0, 0, 0.3);
  }

  .child .label {
      white-space: pre-wrap;
      text-align: center;
      text-overflow: ellipsis;
  }

  .cell {
      font-size: 11px;
      cursor: pointer
  }

.treemap
  = render partial: 'tree_chart', :locals => { budget_file_id: @budget_file.id }

:javascript
  function aTreeChart(aContainer) {
    var isIE, chartWidth, chartHeight, xscale, yscale, color, headerHeight, headerColor, transitionDuration, root, node, treemap, chart, centerNode;

    // Main function to draw and set up the visualization, once we have the data.
    function createVisualization(data) {

      node = root = data;

      treemap.sticky(true);
      var nodes = treemap.nodes(root);

      var children = nodes.filter(function(d) {
          return !d.children;
      });

      var parents = nodes.filter(function(d) {
          return d.children;
      });

      // create parent cells
      var parentCells = chart.selectAll("g.cell.parent")
          .data(parents, function(d) {
              return "p-" + (d.amount + d.label);
          });
      var parentEnterTransition = parentCells.enter()
          .append("g")
          .attr("class", function(d,i){ d.id = i + "bubble_cell_parent"; return "cell parent";})
          .on("mouseover", function(d) {
              self.hoverCallback(d);
          })
          .on("mouseleave", self.hoverCallback(centerNode))
          .on("click", function(d) {
              zoom(d);
          });
      parentEnterTransition.append("rect")
          .attr("width", function(d) {
              return Math.max(0.01, d.dx);
          })
          .attr("height", headerHeight)
          .style("fill", headerColor);
      parentEnterTransition.append('foreignObject')
          .attr("class", "foreignObject")
          .append("xhtml:body")
          .attr("class", "labelbody")
          .append("div")
          .attr("class", "label");
      // update transition
      var parentUpdateTransition = parentCells.transition().duration(transitionDuration);
      parentUpdateTransition.select(".cell")
          .attr("transform", function(d) {
              return "translate(" + d.dx + "," + d.y + ")";
          });
      parentUpdateTransition.select("rect")
          .attr("width", function(d) {
              return Math.max(0.01, d.dx);
          })
          .attr("height", headerHeight)
          .style("fill", headerColor);
      parentUpdateTransition.select(".foreignObject")
          .attr("width", function(d) {
              return Math.max(0.01, d.dx);
          })
          .attr("height", headerHeight)
          .select(".labelbody .label")
          .text(function(d) {
              return d.label;
          });
      // remove transition
      parentCells.exit()
          .remove();

      // create children cells
      var childrenCells = chart.selectAll("g.cell.child")
          .data(children, function(d) {
              return "c-" + (d.amount + d.label);
          });
      // enter transition
      var childEnterTransition = childrenCells.enter()
          .append("g")
          .attr("class", function(d,i){ d.id = i + "bubble_cell_parent"; return "cell child";})
          .on("mouseover", function(d) {
              self.hoverCallback(d);
          })
          .on("mouseleave", self.hoverCallback(centerNode))
          .on("click", function(d) {
              zoom(node === d.parent ? root : d.parent);
          });
      childEnterTransition.append("rect")
          .classed("background", true)
          .style("fill", function(d) {
              return color(d.parent.label);
          });
      childEnterTransition.append('foreignObject')
          .attr("class", "foreignObject")
          .attr("width", function(d) {
              return Math.max(0.01, d.dx);
          })
          .attr("height", function(d) {
              return Math.max(0.01, d.dy);
          })
          .append("xhtml:body")
          .attr("class", "labelbody")
          .append("div")
          .attr("class", "label")
          .text(function(d) {
              return d.label;
          });

      // hide child labels
      //if (isIE) {
      //    childEnterTransition.selectAll(".foreignObject .labelbody .label")
      //        .style("display", "none");
      //} else {
      //    childEnterTransition.selectAll(".foreignObject")
      //        .style("display", "none");
      //}

      // update transition
      var childUpdateTransition = childrenCells.transition().duration(transitionDuration);

      childUpdateTransition.select(".cell")
          .attr("transform", function(d) {
              return "translate(" + d.x  + "," + d.y + ")";
          });

      childUpdateTransition.select("rect")
          .attr("width", function(d) {
              return Math.max(0.01, d.dx);
          })
          .attr("height", function(d) {
              return d.dy;
          })
          .style("fill", function(d) {
              return color(d.parent.label);
          });

      childUpdateTransition.select(".foreignObject")
          .attr("width", function(d) {
              return Math.max(0.01, d.dx);
          })
          .attr("height", function(d) {
              return Math.max(0.01, d.dy);
          })
          .select(".labelbody .label")
          .text(function(d) {
              return d.label;
          });
      // exit transition
      childrenCells.exit()
          .remove();

      zoom(node);
  }

  //and another one
  function textHeight(d) {
      var ky = chartHeight / d.dy;
      yscale.domain([d.y, d.y + d.dy]);
      return (ky * d.dy) / headerHeight;
  }

  function getRGBComponents (color) {
      var r = color.substring(1, 3);
      var g = color.substring(3, 5);
      var b = color.substring(5, 7);
      return {
          R: parseInt(r, 16),
          G: parseInt(g, 16),
          B: parseInt(b, 16)
      };
  }

  function idealTextColor (bgColor) {
      var nThreshold = 105;
      var components = getRGBComponents(bgColor);
      var bgDelta = (components.R * 0.299) + (components.G * 0.587) + (components.B * 0.114);
      return ((255 - bgDelta) < nThreshold) ? "#000000" : "#ffffff";
  }


  function zoom(d) {
      treemap
          .padding([headerHeight/(chartHeight/d.dy), 0, 0, 0])
          .nodes(d);

      // moving the next two lines above treemap layout messes up padding of zoom result
      var kx = chartWidth  / d.dx;
      var ky = chartHeight / d.dy;
      var level = d;

      xscale.domain([d.x, d.x + d.dx]);
      yscale.domain([d.y, d.y + d.dy]);

      // hide child labels
      //if (node != level) {
      //    if (isIE) {
      //        chart.selectAll(".cell.child .foreignObject .labelbody .label")
      //            .style("display", "none");
      //    } else {
      //        chart.selectAll(".cell.child .foreignObject")
      //            .style("display", "none");
      //    }
      //}

      var zoomTransition = chart.selectAll("g.cell").transition().duration(transitionDuration)
          .attr("transform", function(d) {
              return "translate(" + xscale(d.x) + "," + yscale(d.y) + ")";
          })
          .each("end", function(d, i) {
              if (!i && (level !== self.root)) {
                  chart.selectAll(".cell.child")
                      .filter(function(d) {
                          return d.parent === self.node; // only get the children for selected group
                      })
                      .select(".foreignObject .labelbody .label")
                      .style("color", function(d) {
                          return idealTextColor(color(d.parent.label));
                      });

                  if (isIE) {
                      chart.selectAll(".cell.child")
                          .filter(function(d) {
                              return d.parent === self.node; // only get the children for selected group
                          })
                          .select(".foreignObject .labelbody .label")
                          .style("display", "")
                  } else {
                      chart.selectAll(".cell.child")
                          .filter(function(d) {
                              return d.parent === self.node; // only get the children for selected group
                          })
                          .select(".foreignObject")
                          .style("display", "")
                  }
              }
          });

      zoomTransition.select(".foreignObject")
          .attr("width", function(d) {
              return Math.max(0.01, kx * d.dx);
          })
          .attr("height", function(d) {
              return d.children ? headerHeight: Math.max(0.01, ky * d.dy);
          })
          .select(".labelbody .label")
          .text(function(d) {
              return d.label;
          });

      // update the width/height of the rects
      zoomTransition.select("rect")
          .attr("width", function(d) {
              return Math.max(0.01, kx * d.dx);
          })
          .attr("height", function(d) {
              return d.children ? headerHeight : Math.max(0.01, ky * d.dy);
          })
          .style("fill", function(d) {
              return d.children ? headerColor : color(d.parent.label);
          });

      node = d;

      if (d3.event) {
          d3.event.stopPropagation();
      }
      self.clickCallback(d);
    };

    function clear() {
      chart.selectAll("*").remove();
    }

    return {
      initialize: function(options) {
        self = this;
        self.clickCallback = options.clickCallback;
        self.hoverCallback = options.hoverCallback;
        //isIE = BrowserDetect.browser == 'Explorer';
        chartWidth = options.width;
        chartHeight = options.height;
        xscale = d3.scale.linear().range([0, chartWidth]);
        yscale = d3.scale.linear().range([0, chartHeight]);
        color = d3.scale.category10();
        headerHeight = 20;
        headerColor = "#555555";
        transitionDuration = 500;

        $(aContainer + ' #chart').width(chartWidth).height(chartHeight)

        treemap = d3.layout.treemap()
            .round(false)
            .size([chartWidth, chartHeight])
            .value(function(d) { return d.amount; });

        chart = d3.select(".treemap #chart")
            .style("width", chartWidth + "px")
            .style("height", chartHeight + "px")
          .append("svg:svg")
            .attr("width", chartWidth - 20)
            .attr("height", chartHeight)
            .attr("version", 1.1)
            .attr("xmlns", "http://www.w3.org/2000/svg")
          .append("svg:g")
            .attr("transform", "translate(.5,.5)");

      },
      show: function(data) {
        clear();
        createVisualization(data);
        centerNode = data;
      },
      selectNode: function (node) {
        zoom(node);
      },
      set_centerNode: function(node) {
        centerNode = node;
      },
      current_node: function() {
        return centerNode;
      },
      getCenterNode: function(data) {
        var nodes = treemap(data);
        for(i in nodes) {
          if(nodes[i].label == centerNode.label && nodes[i].level == centerNode.level) {
            if(centerNode.parent) {
              if(centerNode.parent.label == nodes[i].parent.label && centerNode.parent.level == nodes[i].parent.level) {
                return nodes[i];
              }
            } else {
              return nodes[i];
            }
          }
        }
      }
    }
  }