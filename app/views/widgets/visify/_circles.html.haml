.circles
  #chart
  %canvas{:style => "display: none;"}
  .pull-right
    = render partial: 'layouts/export_img', :locals => { container: '#chart' }

:javascript
  function aTreeChart(aContainer) {
    var width, height;
    var color;

    var pack, vis, circle;

    var x, y, r;

    var node, root;
    var totalSize, self;
    var current_year, current_month;
    var centerNode = null;

    // Main function to draw and set up the visualization, once we have the data.
    function createVisualization(data) {

      node = root = data;
      var nodes = pack.nodes(root);

      vis.selectAll("circle")
          .data(nodes)
      .enter().append("svg:circle")
          .attr("class", function(d, i) { d.id = i + "bubble"; return d.children ? "parent" : "child"; })
          .attr("cx", function(d) { return d.x; })
          .attr("cy", function(d) { return d.y; })
          .attr("r", function(d) { return d.r; })
          .on("click", mouseclick)
          .on("mouseover", function(d){ self.hoverCallback(d); })
          .on("mouseout", self.hoverCallback(centerNode));

      totalSize = root.value; //vis.selectAll("circle").node().__data__.value

      vis.selectAll(".parent")
          .style("fill", "#1f77b4")
          .style("fill-opacity", ".1")
          .style("stroke", "steelblue")

      vis.selectAll(".child")
          .style("fill", "#ccc")
          .style("stroke", "#999")

    };

    function clear() {
      vis.selectAll("*").remove();
    }

    function mouseclick(d) {
      zoom(node == d ? root : d);
      self.clickCallback(d);
    }

    function zoom(d, i) {
      var k = r / d.r / 2;
      x.domain([d.x - d.r, d.x + d.r]);
      y.domain([d.y - d.r, d.y + d.r]);

      var t;
      if(d3.event) {
        t = vis.transition()
            .duration(d3.event.altKey ? 7500 : 750);
      } else {
        t = vis.transition();
      }

      t.selectAll("circle")
          .attr("cx", function(d) { return x(d.x); })
          .attr("cy", function(d) { return y(d.y); })
          .attr("r", function(d) { return k * d.r; });

      node = d;

      if(d3.event) {
        d3.event.stopPropagation();
      }
    }

    return {
      initialize: function(options) {
        self = this;
        self.clickCallback = options.clickCallback;
        self.hoverCallback = options.hoverCallback;
        width = options.width;
        height = options.height;

        r = height;
        color = d3.scale.category20c();

        totalSize = 0;

        x = d3.scale.linear().range([0, r]),
        y = d3.scale.linear().range([0, r]),

        pack = d3.layout.pack()
          .size([r, r])
          .value(function(d) { return d.amount; })

        vis = d3.select('.circles #chart')
          .style("width", width + "px")
          .style("height", height + "px")
        .append("svg:svg", 'h2')
          .attr("width", width)
          .attr("height", height)
          .attr("version", 1.1)
          .attr("xmlns", "http://www.w3.org/2000/svg")
        .append("svg:g")
          .attr("transform", "translate(" + (width - r) / 2 + "," + (height - r) / 2 + ")");
      },
      show: function(data) {
        clear();
        createVisualization(data);
        centerNode = data;
      },
      selectNode: function (node) {
        mouseclick(node);
      },
      set_centerNode: function(node) {
        centerNode = node;
      },
      current_node: function() {
        return centerNode;
      },
      getCenterNode: function(data) {
        var nodes = pack(data);
        for(i in nodes) {
          if(nodes[i].label == centerNode.label && nodes[i].level == centerNode.level) {
            if(centerNode.parent) {
              if(centerNode.parent.label == nodes[i].parent.label && centerNode.parent.level == nodes[i].parent.level) {
                return nodes[i];
              }
            } else {
              return nodes[i];
            }
          }
        }
      }
    }
  }