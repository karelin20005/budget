:css
  #slider_chart .axis text {
    font: 10px sans-serif;
    fill: #888888;
  }

  #slider_chart .axis path,
  #slider_chart .axis line {
    fill: none;
    stroke: #C8C8C8;
    stroke-width: 1;
    shape-rendering: crispEdges;
  }

  .bar {
    fill: steelblue;
    cursor: pointer;
  }

  #slider_chart .bartext {
    font-size: 0.6em;
  }

  /*label {*/
    /*position: absolute;*/
    /*top: 10px;*/
    /*right: 10px;*/
  /*}*/

  .active_point {
    stroke: #3182bd;
    stroke-width: 2;
  }

#slider_chart


:javascript
  var aSliderChart = function (aContainer) {
    var margin,
        width, height;

    (aContainer == "#svg_tooltip #tooltip-year-slider" || aContainer == ".sidebar_modify #slider_chart") ? margin = {top: 20, right: 20, bottom: 30, left: 20} : margin = {top: 20, right: 20, bottom: 30, left: 50};

    var x, y, xAxis, yAxis, size_scale;

    var svg;

    var color;

    var data, center_node, self;

    var current_year = 0, current_month = 0, current_quarter = 0;

    function delay(d, i) { return i * 10; }

    function hide() {
      if (svg == undefined) return;
      //$(aContainer).height(0);
      //svg.selectAll("*").remove();
      d3.selectAll(".year_slider_chart").style("display","none");
    }

    function sort(data) {
      var x0 = y.domain(data.sort(false
              ? function(a, b) { return a.amount - b.amount; }
              : function(a, b) { return d3.ascending(parseInt(a.label), parseInt(b.label)); })
              .map(function(d) { return d.label; }))
              .copy();

      var transition = svg.transition().duration(150),
          delay = function(d, i) { return i * 10; };

      transition.selectAll(".bar")
          .delay(delay)
          .attr("y", function(d) { return x0(d.label); });

      transition.select(".y.axis")
          .call(yAxis)
        .selectAll("g")
          .delay(delay);
    }

    function get_history_data(data) {
      compare_years = []
      $.each( data, function( year, months ) {
        if(months['0']) {
          compare_years.push( { label: year, amount: months['0']['total'] } )
        }
      })
      return compare_years
    }

    function mouseclick(d) {
      if(d.label != current_year) {
        $(aContainer).find(".active_point").attr("class", " ").attr("stroke", "none");
        $(this).attr("class", "active_point");
        current_year = d.label;
      } else if(current_month != 0) {
        current_month = 0;
        $(".bar.month").css("fill-opacity", "0.5").css("fill", "#A4A4A4");
      } else if(current_quarter != 0) {
        current_quarter = 0;
        $(".bar.quarter").css("fill-opacity", "0.5").css("fill", "#9ecae1");
     }
      self.clickCallback(d.label);
    }

    function mouseover(d) {

      d3.select(this)
        .attr("stroke", "#3182bd")
        .attr("cursor", "pointer")
        .attr("stroke-width", 2);
    }

    function mouseout(d) {
      if(d.label != current_year) {
        d3.select(this)
          .attr("stroke", "none");
      }
     }

    function get_month_by_num(month) {
      return #{I18n.t :abbr_month_names, :scope => :date}[month]
    }

    function show(data) {

      sort(data)

      var totalSize = d3.max(data, function(d) { return d.amount; });
      var maxLabel = d3.max(data, function(d) { return parseInt(d.label); });
      var minLabel = d3.min(data, function(d) { return parseInt(d.label); });

      $(aContainer).height(height + margin.top + margin.bottom);
      svg.selectAll("*").remove();

      var maxSize = totalSize;
      var minSize = d3.min(data, function(d) { return d.amount; });

      if(#{@range}.length > 1) {
        x.domain([minLabel-1, maxLabel+1]);
      } else {
        var year = parseInt(#{@range}[0][0]);
        x.domain([year-1, year+1]);
      }

      y.domain([minSize-minSize/4, maxSize]);
      size_scale.domain(d3.extent(data, function(d) { return d.amount; }));

      var line = d3.svg.line()
                .x(function(d) { return x(d.label); })
                .y(function(d) { return y(d.amount); });

      svg.append("path")
          .attr("class", "line")
          .attr("d", line(data))
          .attr("stroke", "#9ecae1")
          .attr("stroke-width", 1)
          .attr("fill", "none");

      svg.selectAll("dot")
        .data(data)
      .enter().append("circle")
        .attr("class", function(d) { return d.label == current_year ? "active_point" : ""; })
        .attr("r", function(d) { return size_scale(d.amount); })
        .attr("cx", function(d) { return x(d.label); })
        .attr("cy", function(d) { return y(d.amount); })
        .attr("fill", "#9ecae1")
        .on("mouseover", mouseover)
        .on("mouseout", mouseout)
        .on("click", mouseclick)

      if(aContainer != "#svg_tooltip #tooltip-year-slider" && aContainer != ".sidebar_modify #slider_chart") {
        svg.selectAll("dot")
                  .data(data)
                .enter().append("text")
                  .attr("x", function(d) { return x(d.label) + 10; })
                  .attr("y", function(d) { return y(d.amount) - 10; })
                  .style("font-size", "0.7em")
                  .text(function(d) { return aVisify.helpers.formatNumber(d.amount); });
      }

      svg.append("g")
        .attr("class", "x axis")
        .attr("transform", "translate(0," + height + ")")
        .call(xAxis);

    }

    return {
      initialize: function(pHeight, options) {
        self = this;
        self.clickCallback = options.clickCallback;
        $(aContainer).html('');
        var number_of_years = #{@range}.length;
        width = $(aContainer).width() - margin.left - margin.right,
        height = pHeight;

        size_scale = d3.scale.linear()
                       .range([6, 12]);

        x = d3.scale.linear()
          .range([0, width]);

        y = d3.scale.linear()
          .range([height, 0]);

        xAxis = d3.svg.axis()
          .scale(x)
          .ticks(number_of_years+2)
          .tickFormat(d3.format("d"))
          .orient("bottom");

        yAxis = d3.svg.axis()
          .scale(y)
          .ticks(number_of_years)
          .orient("left");

      },
      hide: hide,
      show: function(node, year) {

        if(!node || !node.history) {
          hide();
          return;
        }
        data = get_history_data(node.history);

        if (!data || data.length == 0){
          hide();
          return;
        }

        // cache onhover result

        if(node.id) {
          d3.selectAll(".year_slider_chart").style("display","none");
          if($("#year_slider_" + node.id).length) {
            d3.select("#year_slider_" + node.id).style("display","block");
            return;
          } else {
            d3.selectAll(".year_slider_chart").style("display","none");
            svg = d3.select(aContainer)
                .append("div")
                  .attr("id","year_slider_" + node.id)
                  .attr("class","year_slider_chart")
                  .style("position","absolute")
                  .style("display","block")
                .append("svg")
                  .attr("width", width + margin.left + margin.right)
                  .attr("height", height + margin.top + margin.bottom)
                .append("g")
                  .attr("transform", "translate(" + margin.left + "," + margin.top + ")");
          }
          show(data);
        }
        current_year = year;

      },
      current_month: function() {
        return current_month;
      },
      set_month: function(month) {
        current_month = month;
      },
      current_quarter: function() {
        return current_quarter;
      },
      set_quarter: function(quarter) {
        current_quarter = quarter;
      }
    }
  }
