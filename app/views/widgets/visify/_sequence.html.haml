#sequence

:javascript

  function aSequence(aContainer) {
    var b = {
          w: 200, h: 45, s: 3, t: 10
        }
    var self, path, init_levels, draggable;

    return {
      // Given a node in a partition layout, return an array of all of its ancestor
      // nodes, highest first, but excluding the root.
      container: aContainer,


      show: function(node) {
        this.hideBreadcrumb()
        this.updateBreadcrumbs(
          this.getAncestors(node),
          aVisify.helpers.getPercentageString(node.amount, node.parent ? node.parent.amount : node.amount));
      },

      getAncestors: function(node) {
        path = [];
        var current = node;
        while (current.parent) {
          path.unshift(current);
          current = current.parent;
        }
        path.unshift(current);
        return path;
      },

      initializeBreadcrumbTrail: function(options) {
        self = this;
        self.clickCallback = options.clickCallback;
        self.dropCallback = options.dropCallback;
        init_levels = options.levels;
        draggable = options.draggable;
        // Add the svg area.
        if($("#trail").length <= 0 ) {         // prevent adding new trails when window resize
          var trail = d3.select(aContainer + " #sequence").append("svg:svg")
              .attr("width", '100%')
              .attr("height", 50)
              .attr("id", "trail");
          // Add the label at the end, for the percentage.
          trail.append("svg:text")
            .attr("id", "endlabel")
            .style("fill", "#000");
        }
      },

      // Generate a string that describes the points of a breadcrumb polygon.
      breadcrumbPoints: function(d, i) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.

        points = []
        points.push("0,0");
        points.push(b.w + ",0");
        points.push(b.w + b.t + "," + (b.h / 2));
        points.push(b.w + "," + b.h);
        points.push("0," + b.h);
        if (i > 0) { // Leftmost breadcrumb; don't include 6th vertex.
          points.push(b.t + "," + (b.h / 2));
        }
        //this.points = points
        return points.join(" ");
      },

      breadcrumbLevelPoints: function(d, i) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.

        points = []
        points.push(b.w - 20 + ",0");
        points.push(b.w + ",0");
        points.push(b.w + b.t + "," + (b.h / 2));
        points.push(b.w + "," + b.h);
        points.push(b.w - 20 + "," + b.h);
        //this.points = points
        return points.join(" ");
      },

      // Update the breadcrumb trail to show the current sequence and percentage.
      updateBreadcrumbs: function(nodeArray, percentageString) {
        // Breadcrumb dimensions: width, height, spacing, width of tip/tail.

        // Data join; key function combines name and depth (= position in sequence).
        $(".sequence_hide").slideDown();       // if sequence block not empty it will be shown

        var start_pos = null;
        var level, last_node, dragged = 0;
        var drag = d3.behavior.drag()
            .on("dragstart", function(){
              d3.event.sourceEvent.stopPropagation();
            })
            .on("drag", function(d){
                if(start_pos === null) {
                  level = d.level || d.depth;
                  start_pos = d3.event.x - level*b.w;
                  dragged = 1;
                }
                if(d3.event.x >= (start_pos + b.w + 3) && d3.event.x <= (start_pos + (path.length-1)*(b.w + 3))) {
                  if(d3.event.x < (start_pos + level*b.w + 3)) {
                    if(path[level]['taxonomy'] == "ktfk" && path[level-1]['taxonomy'] == "ktfk_aaa") {
                      return;
                    }
                    entering.attr('transform', "translate(" + (d3.event.x - start_pos) + ",0)");
                    if(d3.event.x < (start_pos + (level - 1)*b.w + 10)) {
                      d3.select("#drag" + (level - 1)).transition().duration(50).attr('transform', "translate(" + (level*(b.w + 3)) + ",0)").attr("id", "drag" + level);
                      entering.attr("id", "drag" + (level - 1));
                      var tmp = path[level-1];
                      path[level-1] = path[level];
                      path[level] = tmp;
                      level--;
                    }
                  } else {
                    if(path[level]['taxonomy'] == "ktfk_aaa" && path[level+1]['taxonomy'] == "ktfk") {
                      return;
                    }
                    entering.attr('transform', "translate(" + (d3.event.x - start_pos) + ",0)");
                    if(d3.event.x > (start_pos + (level + 1)*b.w + 3)) {
                      d3.select("#drag" + (level + 1)).transition().duration(50).attr('transform', "translate(" + (level*(b.w + 3)) + ",0)").attr("id", "drag" + level);
                      entering.attr("id", "drag" + (level + 1));
                      var tmp = path[level+1];
                      path[level+1] = path[level];
                      path[level] = tmp;
                      level++;
                    }
                  }
                }
            })
            .on("dragend", function(d){
                if(dragged != 1) return;
                start_pos = null;
                entering.attr('transform', "translate(" + (level*(b.w + 3)) + ",0)");
                if(level != path[level]['level']) {         // if node was replaced
                  var levels = [], last_node
                  for(var i in path) {
                    var tax = path[i].taxonomy;
                    if(tax) {
                      if(tax.charAt(0) == "_") {
                        tax = tax.substr(1);
                      }
                      levels.push(tax);
                    }
                    if(path[i] == d && path[i-1]) {
                      last_node = path[i-1]
                    }
                  }
                  add_levels = init_levels.filter(function(val) {
                    return levels.indexOf(val) == -1;
                  });
                  if(add_levels) {
                    for(var i in add_levels) {
                      levels.push(add_levels[i]);
                    }
                  }
                  self.dropCallback(levels, last_node);
                }
            });

        var g = d3.select(aContainer + " #trail")
            .selectAll("g")
            .data(nodeArray, function(d) { return d.label + (d.depth || d.level); });

        // Add breadcrumb and label for entering nodes.
        var entering = g.enter().append("svg:g")
                                .attr('transform', "translate(0,0)")
                                .attr("cursor", "pointer")
                                .attr("class", "draggable")
                                .attr("id", function(d){ return "drag" + (d.depth || d.level) })
                                .on('click', function(d) {
                                  if (dragged == 1) return;
                                  self.clickCallback(d);
                                  d3.event.stopPropagation();
                                });

        if(draggable == 1) {
          entering.call(drag);
        }

        entering.append("svg:polygon")
            .attr("points", this.breadcrumbPoints)
            .style("fill", function(d) { return d.color || color(d.label); })
            .style("stroke", "white")

        entering.append("svg:polygon")
            .attr("points", this.breadcrumbLevelPoints)
            .style("fill", function(d) { return d.color || color(d.label); })
            .style("stroke", "white")

        entering.append("svg:text")
            .attr("x", 0)
            .attr("y", 10)
            .attr("dy", "0.35em")
            .attr("text-anchor", "cent")
            .text(function(d) { return d.label; })
            .call(aVisify.helpers.wrap, b.w - 40)

        entering.append("svg:text")
            .attr("x", b.w - 8)
            .attr("y", 23)
            .attr("dy", "0.35em")
            .attr("text-anchor", "middle")
            .style("font-size", "1.2em")
            .style("font-weight", "bold")
            .text(function(d) {
              if(init_levels.indexOf(d.taxonomy) == -1) {
                return d.parent ? init_levels.indexOf(d.parent.taxonomy) + 1 : 0;
              }
              return init_levels.indexOf(d.taxonomy) + 1;
            })

        // Set position for entering and updating nodes.
        g.attr("transform", function(d, i) {
          return "translate(" + i * (b.w + b.s) + ", 0)";
        });

        // Remove exiting nodes.
        g.exit().remove();

        // Now move and update the percentage at the end.
        d3.select(aContainer + " #trail").select("#endlabel")
            .attr("x", (nodeArray.length + 0.5) * (b.w + b.s))
            .attr("y", b.h / 2)
            .attr("dy", "0.35em")
            .attr("text-anchor", "middle")
            .text(percentageString);

        // Make the breadcrumb trail visible, if it's hidden.
        $(aContainer + " #trail g").attr("style", "visibility: ;");
      },

      // Hide the breadcrumb trail
      hideBreadcrumb: function() {
        g = $(aContainer + " #trail g");
        if($(aContainer).parent().attr("class") != "sunburst-seq" && $(aContainer).parent().attr("class") != "treemap") {
          g.attr("style", "visibility: ;");
          g.last().attr("style", "visibility: hidden;");
        } else {
          g.not(':first').attr("style", "visibility: hidden;");
        }
        $('#endlabel').text("");
      },

      getPercentageString: function(amount, totalSize) {
        var percentage = (100 * amount / totalSize).toPrecision(3);
        var percentageString = percentage + "%";
        if (percentage < 0.1) {
          percentageString = "< 0.1%";
        }
        return percentageString;
      }
    }
  }